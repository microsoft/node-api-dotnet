# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# TODO: publish symbols
# TODO: publish to source server
# TODO: run tests

# Name of the run. It is overridden below  with the version of published binaries.
name: 0.0.$(Date:yyMM.d)$(Rev:rrr)

# This script must never be triggered from YAML settings for security reasons.
pr: none
trigger: none

parameters:
  # Matrix with target platforms.
  # x86 versions are not supported by Native AOT.
  # linux-arm64 must be added after we learn how to set up the cross-compilation environment.
  # Use net8.0 as the latest stable version.
- name: buildMatrix
  type: object
  default:
    - Name: win_x64
      VMImage: windows-latest
      TargetRuntime: win-x64
    - Name: win_arm64
      VMImage: windows-latest
      TargetRuntime: win-arm64
    - Name: osx_x64
      VMImage: macos-13
      TargetRuntime: osx-x64
    - Name: osx_arm64
      VMImage: macos-13-arm64
      TargetRuntime: osx-arm64
    - Name: linux_x64
      VMImage: ubuntu-latest
      TargetRuntime: linux-x64

jobs:
  # Build Native AOT .Net hosts for Node-API modules.
  - ${{ each matrixEntry in parameters.buildMatrix }}:
    - job: buildAOTBinary${{ matrixEntry.Name }}
      displayName: Build ${{ matrixEntry.TargetRuntime }} AOT binary

      variables:
        DotNetMoniker: net8.0

      pool:
        vmImage: ${{ matrixEntry.VMImage }}

      steps:
        - checkout: self
          displayName: Deep git fetch for version generation
          fetchDepth: 0 # Use deep fetch for the version calculation by Nerdbank.GitVersioning
          clean: false
          submodules: false
          lfs: false

        - task: UseDotNet@2
          displayName: Install .NET SDK using global.json
          inputs:
            packageType: sdk
            useGlobalJson: true
            includePreviewVersions: true

        - script: env
          displayName: Print environment

        - script: dotnet --info
          displayName: Print .Net info

        - script: >
            dotnet publish
            --configuration Release
            --runtime ${{ matrixEntry.TargetRuntime }}
            --no-self-contained
            --framework $(DotNetMoniker)
            -p:PublishAot=true
            $(Build.SourcesDirectory)/src/NodeApi/NodeApi.csproj
          displayName: Build Native AOT binaries
          env:
            TargetFrameworks: $(DotNetMoniker)

        - task: CopyFiles@2
          displayName: Copy Native AOT binaries to staging
          inputs:
            sourceFolder: "$(Build.SourcesDirectory)/out/bin/Release/NodeApi/\
              aot/${{ matrixEntry.TargetRuntime }}/publish"
            targetFolder: $(Build.StagingDirectory)/AOT/${{ matrixEntry.TargetRuntime }}
            contents: Microsoft.JavaScript.NodeApi.node

        - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
          displayName: "ðŸ“’ Generate artifact manifest: ${{ matrixEntry.TargetRuntime }}"
          inputs:
            BuildDropPath: $(Build.StagingDirectory)/AOT/${{ matrixEntry.TargetRuntime }}

        - task: PublishPipelineArtifact@1
          displayName: "Publish Native AOT artifact: ${{ matrixEntry.TargetRuntime }}"
          inputs:
            artifactName: ${{ matrixEntry.TargetRuntime }}
            targetPath: $(Build.StagingDirectory)/AOT/${{ matrixEntry.TargetRuntime }}

  - job: createPackages
    displayName: Create Nuget and NPM packages
    dependsOn:
      - ${{ each matrixEntry in parameters.buildMatrix }}:
        - buildAOTBinary${{ matrixEntry.Name }}

    variables:
      VMImage: windows-latest
      TargetRuntime: win-x64
      DotNetMoniker: net8.0
      TargetRuntimeList:

    pool:
      vmImage: $(VMImage)

    steps:
      - checkout: self
        displayName: Deep git fetch for version generation
        fetchDepth: 0 # Use deep fetch for the version calculation by Nerdbank.GitVersioning
        clean: false
        submodules: false
        lfs: false

      - task: UseDotNet@2
        displayName: Install .Net 6.0.x
        inputs:
          packageType: sdk
          version: 6.0.x

      - task: UseDotNet@2
        displayName: Install .NET SDK using global.json
        inputs:
          packageType: sdk
          useGlobalJson: true
          includePreviewVersions: true

      - script: env
        displayName: Print environment

      - script: dotnet --info
        displayName: Print .Net info

      - script: dotnet build --configuration Release
        displayName: Build managed assemblies

      - ${{ each matrixEntry in parameters.buildMatrix }}:
        - task: DownloadPipelineArtifact@2
          displayName: Download ${{ matrixEntry.TargetRuntime }} AOT
          inputs:
            artifact: ${{ matrixEntry.TargetRuntime }}
            path: "$(Build.SourcesDirectory)/out/bin/Release/NodeApi/\
              aot/${{ matrixEntry.TargetRuntime }}/publish"

      - ${{ each matrixEntry in parameters.buildMatrix }}:
        - powershell: >
            Write-Host
            "##vso[task.setvariable variable=TargetRuntimeList;]$(TargetRuntimeList)
            ${{ matrixEntry.TargetRuntime }}"
          displayName: "Create RID list: ${{ matrixEntry.TargetRuntime }}"

      - script: echo $(TargetRuntimeList)
        displayName: Show RID list

      - task: DeleteFiles@1 # Code signing utility requires net6.0 runtime
        displayName: Delete global.json for CodeSign
        inputs:
          Contents: global.json

      - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@2
        displayName: CodeSign Binaries
        inputs:
          ConnectedServiceName: ESRP-JsHost2
          FolderPath: $(Build.SourcesDirectory)/out/bin/Release
          # Recursively finds files matching these patterns:
          Pattern: |
            **/Microsoft.JavaScript.NodeApi.dll
            **/win-x64/publish/Microsoft.JavaScript.NodeApi.node
            **/Microsoft.JavaScript.NodeApi.DotNetHost.dll
            **/Microsoft.JavaScript.NodeApi.Generator.dll
            **/Microsoft.JavaScript.NodeApi.Generator.exe
          UseMinimatch: true
          signConfigType: inlineSignParams
          inlineOperation: |
            [
              {
                "KeyCode" : "CP-230012",
                "OperationCode" : "SigntoolSign",
                "Parameters" : {
                    "OpusName" : "Microsoft",
                    "OpusInfo" : "http://www.microsoft.com",
                    "FileDigest" : "/fd \"SHA256\"",
                    "PageHash" : "/NPH",
                    "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                },
                "ToolName" : "sign",
                "ToolVersion" : "1.0"
              },
              {
                  "KeyCode" : "CP-230012",
                  "OperationCode" : "SigntoolVerify",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              }
            ]

      # Do not build or publish assemblies to avoid overriding signed binaries.
      - script: dotnet pack --configuration Release --no-build -p:NoPublish=true
        displayName: Create Nuget and NPM packages
        env:
          RuntimeIdentifierList: $(TargetRuntimeList)

      - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@2
        displayName: CodeSign NuGets
        inputs:
          ConnectedServiceName: ESRP-JsHost2
          FolderPath: $(Build.SourcesDirectory)/out/pkg
          Pattern: |
            **/Microsoft.JavaScript.NodeApi.*.nupkg
          UseMinimatch: true
          signConfigType: inlineSignParams
          inlineOperation: |
            [
              {
                  "KeyCode" : "CP-401405",
                  "OperationCode" : "NuGetSign",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              },
              {
                  "KeyCode" : "CP-401405",
                  "OperationCode" : "NuGetVerify",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              }
            ]

      - task: CopyFiles@2
        displayName: Copy packages to staging
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/out/pkg
          targetFolder: $(Build.StagingDirectory)/pkg
          contents: |
            *.nupkg
            *.tgz

      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
        displayName: ðŸ“’ Generate artifact manifest
        inputs:
          BuildDropPath: $(Build.StagingDirectory)/pkg

      - task: PublishPipelineArtifact@1
        displayName: Publish artifact with packages
        inputs:
          targetPath: $(Build.StagingDirectory)/pkg
          artifactName: published-packages
