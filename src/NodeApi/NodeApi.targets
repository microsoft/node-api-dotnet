<Project>
  <Target Name="RenameToDotNode"
    AfterTargets="CopyNativeBinary"
    BeforeTargets="PublishManagedAssembly"
    DependsOnTargets="_CopyAotSymbols"
    Condition=" '$(PublishNodeModule)' == 'true' "
  >
    <!-- If publishing a node module for for multiple platforms, use an rid-specific subdir. -->
    <PropertyGroup>
      <PublishNodeModuleDir  Condition=" '$(PublishMultiPlatformNodeModule)' != 'true' ">$(PublishDir)</PublishNodeModuleDir>
      <PublishNodeModuleDir  Condition=" '$(PublishMultiPlatformNodeModule)' == 'true' ">$(PublishDir)$(RuntimeIdentifier)/</PublishNodeModuleDir>
    </PropertyGroup>
    <MakeDir Directories="$(PublishNodeModuleDir)" />

    <!-- Rename/move the native library (and its symbols file) to have a .node extension. -->
    <Move SourceFiles="$(PublishDir)$(TargetName)$(NativeBinaryExt)"
      DestinationFiles="$(PublishNodeModuleDir)$(TargetName).node" />
    <Move Condition="Exists('$(PublishDir)$(TargetName).pdb')"
      SourceFiles="$(PublishDir)$(TargetName).pdb"
      DestinationFiles="$(PublishNodeModuleDir)$(TargetName).node.pdb" />
    <Move Condition="Exists('$(PublishDir)$(TargetName).so.dbg')"
      SourceFiles="$(PublishDir)$(TargetName).so.dbg"
      DestinationFiles="$(PublishNodeModuleDir)$(TargetName).node.dbg" />

    <!-- The following tasks make some small modifications to the module-loader scripts so they load
    the AOT module directly instead of loading the .NET assembly via the node-api-dotnet package. -->

    <!-- Replace "const dotnet = require('node-api-dotnet');" with "const dotnet = undefined;" -->
    <WriteLinesToFile Overwrite="true" Condition="Exists('$(PublishDir)$(TargetName).js')"
          Lines="$([System.IO.File]::ReadAllText('$(PublishDir)$(TargetName).js')
            .Replace('const dotnet = require(&apos;node-api-dotnet&apos;);', 'const dotnet = undefined;'))"
          File="$(PublishDir)$(TargetName).js" />
    <WriteLinesToFile Overwrite="true" Condition="Exists('$(PublishDir)$(TargetName).cjs')"
          Lines="$([System.IO.File]::ReadAllText('$(PublishDir)$(TargetName).cjs')
            .Replace('const dotnet = require(&apos;node-api-dotnet&apos;);', 'const dotnet = undefined;'))"
          File="$(PublishDir)$(TargetName).cjs" />

    <!-- Replace "import dotnet from 'node-api-dotnet';" with "const dotnet = undefined;" -->
    <WriteLinesToFile Overwrite="true" Condition="Exists('$(PublishDir)$(TargetName).js')"
          Lines="$([System.IO.File]::ReadAllText('$(PublishDir)$(TargetName).js')
            .Replace('import dotnet from &apos;node-api-dotnet&apos;;', 'const dotnet = undefined;'))"
          File="$(PublishDir)$(TargetName).js" />
    <WriteLinesToFile Overwrite="true" Condition="Exists('$(PublishDir)$(TargetName).mjs')"
          Lines="$([System.IO.File]::ReadAllText('$(PublishDir)$(TargetName).mjs')
            .Replace('import dotnet from &apos;node-api-dotnet&apos;;', 'const dotnet = undefined;'))"
          File="$(PublishDir)$(TargetName).mjs" />

    <!-- Remove "rid," from the import path when not using a rid-specific subdir. -->
    <WriteLinesToFile Overwrite="true"
          Condition="Exists('$(PublishDir)$(TargetName).js') AND '$(PublishMultiPlatformNodeModule)' != 'true'"
          Lines="$([System.IO.File]::ReadAllText('$(PublishDir)$(TargetName).js').Replace(' rid,', ''))"
          File="$(PublishDir)$(TargetName).js" />
    <WriteLinesToFile Overwrite="true"
          Condition="Exists('$(PublishDir)$(TargetName).cjs') AND '$(PublishMultiPlatformNodeModule)' != 'true'"
          Lines="$([System.IO.File]::ReadAllText('$(PublishDir)$(TargetName).cjs').Replace(' rid,', ''))"
          File="$(PublishDir)$(TargetName).cjs" />
    <WriteLinesToFile Overwrite="true"
          Condition="Exists('$(PublishDir)$(TargetName).mjs') AND '$(PublishMultiPlatformNodeModule)' != 'true'"
          Lines="$([System.IO.File]::ReadAllText('$(PublishDir)$(TargetName).mjs').Replace(' rid,', ''))"
          File="$(PublishDir)$(TargetName).mjs" />
  </Target>

  <Target Name="PackNpmPackage"
    AfterTargets="RenameToDotNode"
    BeforeTargets="PublishManagedAssembly"
    Condition=" '$(PackNpmPackage)' == 'true' "
  >
    <MakeDir Directories="$(PackageOutputPath)" />
    <Exec Command="npm pack --pack-destination=&quot;$(PackageOutputPath)&quot;" />
  </Target>
</Project>
