<Project>
  <PropertyGroup>
    <GenerateNodeApiTypeDefinitions Condition=" '$(GenerateNodeApiTypeDefinitions)' == '' ">true</GenerateNodeApiTypeDefinitions>
    <NodeApiTypeDefinitionsFileName Condition=" '$(NodeApiTypeDefinitionsFileName)' == '' ">$(TargetName).d.ts</NodeApiTypeDefinitionsFileName>

    <NodeApiGeneratorAssemblyName>Microsoft.JavaScript.NodeApi.Generator</NodeApiGeneratorAssemblyName>
    <NodeApiGeneratorAssemblyPath>$(MSBuildThisFileDirectory)../analyzers/dotnet/cs/$(NodeApiGeneratorAssemblyName).dll</NodeApiGeneratorAssemblyPath>
    <NodeApiAssemblyJSModuleType Condition=" '$(NodeApiAssemblyJSModuleType)' == '' ">commonjs</NodeApiAssemblyJSModuleType>
    <NodeApiTypeDefinitionsGeneratorOptions>--module $(NodeApiAssemblyJSModuleType) $(NodeApiTypedefsGeneratorOptions) --framework $(TargetFramework)</NodeApiTypeDefinitionsGeneratorOptions>

    <NodeApiGeneratedFilesDir Condition="'$(NodeApiGeneratedFilesDir)' == ''">$([MSBuild]::NormalizeDirectory('$(MSBuildProjectDirectory)', '$(IntermediateOutputPath)', 'Generated Files'))</NodeApiGeneratedFilesDir>
  </PropertyGroup>

  <Target Name="ConfigureNodeApiTypeDefinitions"
    Condition=" '$(GenerateNodeApiTypeDefinitions)' == 'true' "
    BeforeTargets="BeforeBuild"
  >
    <!-- When the project does not have any source files, copy all reference assemblies to output and generate typedefs for them. -->
    <PropertyGroup Condition=" '@(Compile)' == '' ">
      <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
      <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
      <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>
      <GenerateNodeApiTypeDefinitionsForReferences Condition=" '$(GenerateNodeApiTypeDefinitionsForReferences)' == '' ">true</GenerateNodeApiTypeDefinitionsForReferences>
    </PropertyGroup>
  </Target>

  <!--
    Generates TS type definitions for a Node API module project.
   -->
  <Target Name="GenerateNodeApiTypeDefinitions"
    AfterTargets="Build"
    Inputs="$(TargetPath)"
    Outputs="$(TargetDir)$(NodeApiTypeDefinitionsFileName)"
    Condition=" '$(GenerateNodeApiTypeDefinitions)' == 'true' AND Exists('$(TargetPath)') "
  >
    <PropertyGroup>
      <NodeApiArgumentsFile>$(NodeApiGeneratedFilesDir)NodeApi.arg</NodeApiArgumentsFile>
      <NodeApiArgumentsContent>--assembly &quot;$(TargetPath)&quot; @(ReferencePathWithRefAssemblies->'--reference "%(Identity)"') --typedefs &quot;$(TargetDir)$(NodeApiTypeDefinitionsFileName)&quot; $(NodeApiTypeDefinitionsGeneratorOptions)</NodeApiArgumentsContent>
    </PropertyGroup>
    <MakeDir Directories="$(NodeApiGeneratedFilesDir)" />
    <WriteLinesToFile File="$(NodeApiArgumentsFile)" Lines="$(NodeApiArgumentsContent)" Overwrite="true" />
    <Exec Command="dotnet &quot;$(NodeApiGeneratorAssemblyPath)&quot; &quot;$(NodeApiArgumentsFile)&quot;"
      ConsoleToMSBuild="true" />
  </Target>

  <!--
   Publishes TS type definitions for a Node API module project.
   -->
  <Target Name="PublishNodeApiTypeDefinitions"
    AfterTargets="Publish"
    Inputs="$(TargetDir)$(NodeApiTypeDefinitionsFileName)"
    Outputs="$(PublishDir)$(NodeApiTypeDefinitionsFileName)"
    Condition=" '$(GenerateNodeApiTypeDefinitions)' == 'true' AND Exists('$(TargetDir)$(NodeApiTypeDefinitionsFileName)') "
  >
    <Copy SourceFiles="$(TargetDir)$(NodeApiTypeDefinitionsFileName)" DestinationFolder="$(PublishDir)" />
  </Target>

  <Target Name="CleanNodeApiTypeDefinitions" AfterTargets="CoreClean">
    <Delete Files="$(TargetDir)$(NodeApiTypeDefinitionsFileName)" />
    <Delete Files="$(PublishDir)$(NodeApiTypeDefinitionsFileName)" />
  </Target>

  <!--
    Supports building a project that does not compile any code, but only collects and outputs
    a set of package references in the output directory for use by a JavaScript project.
   -->
  <Target Name="OutputReferenceAssembliesOnly"
      Condition=" '$(GenerateNodeApiTypeDefinitionsForReferences)' == 'true' "
      AfterTargets="ResolvePackageAssets">
    <ItemGroup>
      <ResourceCopyLocalItems Remove="@(ResourceCopyLocalItems)" />
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)"
        Condition=" '%(Filename)' == 'Microsoft.JavaScript.NodeApi.Generator' " />
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)"
        Condition=" '%(Filename)' == 'Microsoft.CodeAnalysis' " />
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)"
        Condition=" '%(Filename)' == 'Microsoft.CodeAnalysis.CSharp' " />
      <NodeApiReferenceAssemblies Include="@(RuntimeCopyLocalItems)" />
    </ItemGroup>
  </Target>

  <!--
    Generates TS type definitions for all referenced assemblies in the output directory.
   -->
  <Target Name="GenerateNodeApiReferenceTypeDefinitions"
    AfterTargets="OutputReferenceAssembliesOnly"
    Inputs="@(NodeApiReferenceAssemblies)"
    Outputs="@(NodeApiReferenceAssemblies->'$(TargetDir)%(Filename).d.ts')"
    Condition=" '$(GenerateNodeApiTypeDefinitions)' == 'true' AND '$(Compile)' == '' "
  >
    <PropertyGroup Condition=" '$(EnableTSGenerationWarnings)' != 'true' ">
      <_SuppressTSGenerationWarnings>--nowarn</_SuppressTSGenerationWarnings>
    </PropertyGroup>

    <ItemGroup Condition="$(TargetFramework.StartsWith('net4'))">
      <NodeApiSystemReferenceAssemblies Include="mscorlib" />
      <NodeApiSystemReferenceAssemblies Include="System" />
    </ItemGroup>
    <ItemGroup Condition="! $(TargetFramework.StartsWith('net4'))">
      <NodeApiSystemReferenceAssemblies Include="System.Runtime" />
      <NodeApiSystemReferenceAssemblies Include="System.Console" />
    </ItemGroup>
    <ItemGroup>
      <!-- This does not use @(NodeApiReferenceAssemblies), like the target Inputs, to avoid excluding items that are up-to-date. -->
      <_NodeApiAllReferenceAssemblies Include="@(RuntimeCopyLocalItems)" />
      <_NodeApiAllReferenceAssemblies Include="@(NodeApiSystemReferenceAssemblies)" />

      <_NodeApiAllTypeDefs Include="@(RuntimeCopyLocalItems->'$(TargetDir)%(Filename).d.ts')" />
      <_NodeApiAllTypeDefs Include="@(NodeApiSystemReferenceAssemblies->'$(TargetDir)%(Identity).d.ts')" />
    </ItemGroup>

    <PropertyGroup>
      <NodeApiArgumentsFile>$(NodeApiGeneratedFilesDir)NodeApiReferences.arg</NodeApiArgumentsFile>
      <NodeApiArgumentsContent>$(_SuppressTSGenerationWarnings) @(_NodeApiAllReferenceAssemblies->'--assemblies "%(Identity)"') --typedefs &quot;@(_NodeApiAllTypeDefs)&quot; $(NodeApiTypeDefinitionsGeneratorOptions)"</NodeApiArgumentsContent>
    </PropertyGroup>
    <MakeDir Directories="$(NodeApiGeneratedFilesDir)" />
    <WriteLinesToFile File="$(NodeApiArgumentsFile)" Lines="$(NodeApiArgumentsContent)" Overwrite="true" />
    <Exec Command="dotnet &quot;$(NodeApiGeneratorAssemblyPath)&quot; &quot;$(NodeApiArgumentsFile)&quot;"
      ConsoleToMSBuild="true" />
  </Target>

</Project>
