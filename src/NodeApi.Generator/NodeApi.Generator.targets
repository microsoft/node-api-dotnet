<Project>
  <PropertyGroup>
    <GenerateNodeApiTypeDefinitions Condition=" '$(GenerateNodeApiTypeDefinitions)' == '' ">true</GenerateNodeApiTypeDefinitions>
    <NodeApiTypeDefinitionsFileName Condition=" '$(NodeApiTypeDefinitionsFileName)' == '' ">$(TargetName).d.ts</NodeApiTypeDefinitionsFileName>

    <NodeApiGeneratorAssemblyName>Microsoft.JavaScript.NodeApi.Generator</NodeApiGeneratorAssemblyName>
    <NodeApiGeneratorAssemblyPath>$(MSBuildThisFileDirectory)../analyzers/dotnet/cs/$(NodeApiGeneratorAssemblyName).dll</NodeApiGeneratorAssemblyPath>

    <!-- Try to infer the module type from package.json in the project directory. Otherwise default to generating both module types.-->
    <NodeApiPackageJson Condition=" '$(NodeApiPackageJson)' == '' ">$(ProjectDir)package.json</NodeApiPackageJson>
    <NodeApiJSModuleType Condition=" '$(NodeApiJSModuleType)' == '' AND Exists('$(NodeApiPackageJson)') ">&quot;$(NodeApiPackageJson)&quot;</NodeApiJSModuleType>
    <NodeApiJSModuleType Condition=" '$(NodeApiJSModuleType)' == '' ">commonjs,esm</NodeApiJSModuleType>

    <NodeApiTypeDefinitionsGeneratorOptions>--module $(NodeApiJSModuleType) --framework $(TargetFramework) $(NodeApiTypedefsGeneratorOptions)</NodeApiTypeDefinitionsGeneratorOptions>
  </PropertyGroup>

  <Target Name="ConfigureNodeApiTypeDefinitions"
    Condition=" '$(GenerateNodeApiTypeDefinitions)' == 'true' "
    BeforeTargets="BeforeBuild"
  >
    <!-- When the project does not have any source files, copy all reference assemblies to output and generate typedefs for them. -->
    <PropertyGroup Condition=" '@(Compile)' == '' ">
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
        <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
        <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>
        <GenerateNodeApiTypeDefinitionsForReferences Condition=" '$(GenerateNodeApiTypeDefinitionsForReferences)' == '' ">true</GenerateNodeApiTypeDefinitionsForReferences>
    </PropertyGroup>
  </Target>

  <!--
    Generates TS type definitions for a Node API module project.
   -->
  <Target Name="GenerateNodeApiTypeDefinitions"
    AfterTargets="Build"
    Inputs="$(TargetPath)"
    Outputs="$(TargetDir)$(NodeApiTypeDefinitionsFileName)"
    Condition=" '$(GenerateNodeApiTypeDefinitions)' == 'true' AND Exists('$(TargetPath)') "
  >
    <PropertyGroup>
      <NodeApiGeneratorResponseFile>$(IntermediateOutputPath)$(NodeApiGeneratorAssemblyName).rsp</NodeApiGeneratorResponseFile>
      <_NodeApiGeneratorTargetingPacks>@(TargetingPack, '%3B')</_NodeApiGeneratorTargetingPacks>
      <_NodeApiGeneratorAssemblyReferences>@(ReferencePathWithRefAssemblies, '%3B')</_NodeApiGeneratorAssemblyReferences>
    </PropertyGroup>

    <WriteLinesToFile File="$(NodeApiGeneratorResponseFile)" Lines="--assembly &quot;$(TargetPath)&quot;" Overwrite="true" />
    <WriteLinesToFile File="$(NodeApiGeneratorResponseFile)" Lines="--packs &quot;$(_NodeApiGeneratorTargetingPacks)&quot;" />
    <WriteLinesToFile File="$(NodeApiGeneratorResponseFile)" Lines="--reference &quot;$(_NodeApiGeneratorAssemblyReferences)&quot;" />
    <WriteLinesToFile File="$(NodeApiGeneratorResponseFile)" Lines="--typedefs &quot;$(TargetDir)$(NodeApiTypeDefinitionsFileName)&quot;" />
    <WriteLinesToFile File="$(NodeApiGeneratorResponseFile)" Lines="$(NodeApiTypeDefinitionsGeneratorOptions)" />

    <!-- Run the generator using args from the response file. Note the '@' indicates the response file NOT an MSBuild item-list. -->
    <Exec Command="dotnet &quot;$(NodeApiGeneratorAssemblyPath)&quot; &quot;@$(NodeApiGeneratorResponseFile)&quot;"
      ConsoleToMSBuild="true" />
  </Target>

  <!--
   Publishes TS type definitions for a Node API module project.
   -->
  <Target Name="PublishNodeApiTypeDefinitions"
    AfterTargets="Publish"
    Inputs="$(TargetDir)$(NodeApiTypeDefinitionsFileName)"
    Outputs="$(PublishDir)$(NodeApiTypeDefinitionsFileName)"
    Condition=" '$(GenerateNodeApiTypeDefinitions)' == 'true' AND Exists('$(TargetDir)$(NodeApiTypeDefinitionsFileName)') "
  >
    <Copy SourceFiles="$(TargetDir)$(NodeApiTypeDefinitionsFileName)" DestinationFolder="$(PublishDir)" />
    <Copy SourceFiles="$(TargetDir)$(TargetName).js" DestinationFolder="$(PublishDir)" Condition="Exists('$(TargetDir)$(TargetName).js')" />
    <Copy SourceFiles="$(TargetDir)$(TargetName).cjs" DestinationFolder="$(PublishDir)" Condition="Exists('$(TargetDir)$(TargetName).cjs')" />
    <Copy SourceFiles="$(TargetDir)$(TargetName).mjs" DestinationFolder="$(PublishDir)" Condition="Exists('$(TargetDir)$(TargetName).mjs')" />
  </Target>

  <Target Name="CleanNodeApiTypeDefinitions" AfterTargets="CoreClean">
    <Delete Files="$(TargetDir)$(NodeApiTypeDefinitionsFileName)" />
    <Delete Files="$(PublishDir)$(NodeApiTypeDefinitionsFileName)" />
  </Target>

  <!--
    Supports building a project that does not compile any code, but only collects and outputs
    a set of package references in the output directory for use by a JavaScript project.
   -->
  <Target Name="OutputReferenceAssembliesOnly"
      Condition=" '$(GenerateNodeApiTypeDefinitionsForReferences)' == 'true' "
      AfterTargets="ResolvePackageAssets">
    <ItemGroup>
      <ResourceCopyLocalItems Remove="@(ResourceCopyLocalItems)" />
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)"
        Condition=" '%(Filename)' == 'Microsoft.JavaScript.NodeApi.Generator' " />
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)"
        Condition=" '%(Filename)' == 'Microsoft.CodeAnalysis' " />
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)"
        Condition=" '%(Filename)' == 'Microsoft.CodeAnalysis.CSharp' " />
      <NodeApiReferenceAssemblies Include="@(RuntimeCopyLocalItems)" />
    </ItemGroup>
  </Target>

  <!--
    Generates TS type definitions for all referenced assemblies in the output directory.
   -->
  <Target Name="GenerateNodeApiReferenceTypeDefinitions"
    AfterTargets="OutputReferenceAssembliesOnly"
    Inputs="@(NodeApiReferenceAssemblies)"
    Outputs="@(NodeApiReferenceAssemblies->'$(TargetDir)%(Filename).d.ts')"
    Condition=" '$(GenerateNodeApiTypeDefinitions)' == 'true' AND '$(Compile)' == '' "
  >
    <PropertyGroup Condition=" '$(EnableTSGenerationWarnings)' != 'true' ">
      <_SuppressTSGenerationWarnings>--nowarn</_SuppressTSGenerationWarnings>
    </PropertyGroup>

    <ItemGroup Condition="$(TargetFramework.StartsWith('net4'))">
      <NodeApiSystemReferenceAssembly Include="mscorlib" />
      <NodeApiSystemReferenceAssembly Include="System" />
    </ItemGroup>
    <ItemGroup Condition="! $(TargetFramework.StartsWith('net4'))">
      <NodeApiSystemReferenceAssembly Include="System.Runtime" />
      <NodeApiSystemReferenceAssembly Include="System.Console" />
    </ItemGroup>
    <ItemGroup>
      <!-- This does not use @(NodeApiReferenceAssemblies), like the target Inputs, to avoid excluding items that are up-to-date. -->
      <_NodeApiAllReferenceAssemblies Include="@(RuntimeCopyLocalItems)" />
      <_NodeApiAllReferenceAssemblies Include="@(NodeApiSystemReferenceAssembly)" />

      <_NodeApiAllTypeDefs Include="@(RuntimeCopyLocalItems->'$(TargetDir)%(Filename).d.ts')" />
      <_NodeApiAllTypeDefs Include="@(NodeApiSystemReferenceAssembly->'$(TargetDir)%(Identity).d.ts')" />
    </ItemGroup>

    <PropertyGroup>
      <NodeApiGeneratorResponseFile>$(IntermediateOutputPath)$(NodeApiGeneratorAssemblyName).rsp</NodeApiGeneratorResponseFile>
      <_NodeApiGeneratorTargetingPacks>@(TargetingPack, '%3B')</_NodeApiGeneratorTargetingPacks>
      <_NodeApiGeneratorAssemblyReferences>@(_NodeApiAllReferenceAssemblies, '%3B')</_NodeApiGeneratorAssemblyReferences>
      <_NodeApiGeneratorTypeDefs>@(_NodeApiAllTypeDefs, '%3B')</_NodeApiGeneratorTypeDefs>
    </PropertyGroup>

    <WriteLinesToFile File="$(NodeApiGeneratorResponseFile)" Lines="--assemblies &quot;$(_NodeApiGeneratorAssemblyReferences)&quot;" Overwrite="true" />
    <WriteLinesToFile File="$(NodeApiGeneratorResponseFile)" Lines="--packs &quot;$(_NodeApiGeneratorTargetingPacks)&quot;" />
    <WriteLinesToFile File="$(NodeApiGeneratorResponseFile)" Lines="--typedefs &quot;$(_NodeApiGeneratorTypeDefs)&quot;" />
    <WriteLinesToFile File="$(NodeApiGeneratorResponseFile)" Lines="$(NodeApiTypeDefinitionsGeneratorOptions)" />

    <!-- Run the generator using args from the response file. Note the '@' indicates the response file NOT an MSBuild item-list. -->
    <Exec Command="dotnet &quot;$(NodeApiGeneratorAssemblyPath)&quot; &quot;@$(NodeApiGeneratorResponseFile)&quot;"
      ConsoleToMSBuild="true" />
  </Target>

</Project>
